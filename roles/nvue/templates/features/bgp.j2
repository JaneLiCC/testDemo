
{% if evpnEnable is defined %}
    evpn:
      enable: on
{% endif %}
    router:
      bgp:
        enable: on
{% if graceful_restart is defined %}
        graceful-restart:
          mode: {{ graceful_restart.mode }}
{%  endif %}
{% if graceful_shutdown is true %}
        graceful-shutdown: on
{%  endif %}
{% if adaptive_routing is defined %}
      adaptive-routing:
        enable: on
{%  endif %}
{% if routing_policies %}
      policy:
{% if prefix_list is defined %}
        prefix-list:
{% for list in prefix_list %}
          {{ list.name }}:
            rule:
{% for rule in list.rules %}
              '{{ rule.id }}':
                action: {{ rule.action }}
                match:
                  {{ rule.match }}:
                    max-prefix-len: {{ rule.max_prefix_len }}
{% endfor %}
            type: {{ list.type }}
{% endfor %}
{%  endif %}
{% if route_map is defined %}
        route-map:
{% for map in route_map %}
          {{ map.name }}:
            rule:
{% for rule in map.rules %}
              '{{ rule.id }}':
                action:
                  {{ rule.action }}: {}
                description: {{ rule.description }}
{% if rule.match is defined %}
                match:
                  {{ rule.match }}: {{ rule.match_param }}
                  type: {{ rule.type }}
{% elif rule.set is defined  %}
                set:
                  {{ rule.set }}: {{ rule.set_param }}
{% endif %}
{% endfor %}
{% endfor %}
{%  endif %}
{%  endif %}
    vrf:
      default:
        router:
          bgp:
            router-id: {{ bgp.router_id }}
            autonomous-system: {{ bgp.asn }}
            neighbor:
{% for neighbor in bgp.neighbors %}
              {{ neighbor.int }}:
                peer-group: {{ neighbor.peergroup }}
                type: unnumbered
{% endfor %}{# bgp.neighbors #}
{# remove the overlay_neighbors if not EVPN #}
{% if evpnEnable is defined %}
{% for neighbor in bgp.overlay_neighbors %}
              {{ neighbor.ip }}:
                peer-group: {{ neighbor.peergroup }}
                type: numbered
{% endfor %}{# bgp.overlay_neighbors #}
{%  endif %}
{% if bgp.path_selection is defined %}
            path-selection:
              multipath:
                {{bgp.path_selection.multipath}}: on
{%  endif %}
            enable: on
            peer-group:
{% for peergroup in bgp.peergroups|default() %}
              {{ peergroup.name }}:
{%  if peergroup.name == "underlay" %}
                address-family:
                  ipv4-unicast:
                    policy:
                      outbound:
                        route-map: w_ecmp
{% if underlay_bfd is defined %}
                bfd:
                  detect-multiplier: {{ underlay_bfd.detect_multiplier }}
                  enable: on
                  min-rx-interval: {{ underlay_bfd.min_rx_interval }}
                  min-tx-interval: {{ underlay_bfd.min_tx_interval }}
      {%  endif %}
{% elif peergroup.name == "overlay" %}
      {% if overlay_bfd is defined %}
                bfd:
                  detect-multiplier: {{ overlay_bfd.detect_multiplier }}
                  enable: on
                  min-rx-interval: {{ overlay_bfd.min_rx_interval }}
                  min-tx-interval: {{ overlay_bfd.min_tx_interval }}
{%  endif %}
                multihop-ttl: {{ peergroup.ttl }}
                update-source: {{ peergroup.src }}
{%  endif %}
                description: {{ peergroup.description }}
                remote-as: {{ peergroup.remote_as }}
{% for address_family in bgp.address_family|default() %}
{% for neighbor in address_family.neighbors|default() %}
{% if peergroup.name == "overlay" %}
{% if address_family.name == "ipv4_unicast" %}
{%       if neighbor.activate|default(False) %}
                address-family:
                  {{ address_family.name|replace('_', '-') }}:
                    enable: off
{%       endif %}
{% elif address_family.name == "l2vpn_evpn" %}
{%       if neighbor.activate|default(False) %}
                  {{ address_family.name|replace('_', '-') }}:
                    enable: on
{%       endif %}
{%       endif %}
{%       endif %}
{%     endfor %}{# address_family.neighbors #}
{% endfor %}{# bgp.address_family #}
{% endfor %}{# bgp.peergroups #}
            address-family:
{%   for address_family in bgp.address_family|default() %}
{%     if address_family.name == "ipv4_unicast" %}
              ipv4-unicast:
{%       for redistribute in address_family.redistribute|default() %}
                redistribute:
                  {{ redistribute.type }}:
                    enable: on
                enable: on
{%       endfor %}
{%     elif address_family.name == "l2vpn_evpn" %}
{%        if evpnEnable is defined %}
              l2vpn-evpn:
                enable: on
{%        endif %}
{%     endif %}
{%   endfor %}{# bgp.address_family #}
{% for vrf in bgp.vrfs|default() %}
      {{ vrf.name }}:
        router:
          bgp:
            autonomous-system: {{ bgp.asn }}
            enable: on
            rd: {{ bgp.vrf_params.router_id }}:{{ vrf.vni }}
            router-id: {{ bgp.vrf_params.router_id }}
{% if bgp.path_selection is defined %}
            path-selection:
              multipath:
                {{bgp.path_selection.multipath}}: on
{%  endif %}
            address-family:
{%   for address_family in bgp.vrf_params.address_family|default() %}
{%     if address_family.name == "ipv4_unicast" %}
              ipv4-unicast:
{%       for redistribute in address_family.redistribute|default() %}
                redistribute:
                  {{ redistribute.type }}:
                    enable: on
{%       endfor %}{# address_family.redistribute #}
                enable: on
{%       for route_export in address_family.route_export|default() %}
                route-export:
                  {{ route_export.type }}:
                    enable: on
{%       endfor %}{# address_family.route_export #}
{%     elif address_family.name == "l2vpn_evpn" %}
{%        if evpnEnable is defined %}
              l2vpn-evpn:
                enable: on
{%        endif %}
{%     endif %}{# address_family.name #}
{%   endfor %}{# vrf.address_family #}
{%   if evpnEnable is defined %}
        evpn:
          vni:
            '{{ vrf.vni }}': {}
          enable: on
{%   endif %}
{%   endfor %}{# bgp.vrfs #}

